# Script PowerShell pour build de production optimis√©
# Usage: .\scripts\build-production.ps1

Write-Host "üöÄ D√©but du build de production MacGyver..." -ForegroundColor Green

# V√©rification des pr√©requis
Write-Host "üîç V√©rification des pr√©requis..." -ForegroundColor Yellow

# V√©rifier Node.js
if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Node.js n'est pas install√©!" -ForegroundColor Red
    exit 1
}

# V√©rifier Rust
if (-not (Get-Command cargo -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Rust n'est pas install√©!" -ForegroundColor Red
    exit 1
}

# V√©rifier Tauri CLI
if (-not (Get-Command tauri -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Tauri CLI n'est pas install√©!" -ForegroundColor Red
    Write-Host "Installez avec: cargo install tauri-cli" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Tous les pr√©requis sont install√©s" -ForegroundColor Green

# Nettoyage des builds pr√©c√©dents
Write-Host "üßπ Nettoyage des builds pr√©c√©dents..." -ForegroundColor Yellow
if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
if (Test-Path "src-tauri/target") { Remove-Item -Recurse -Force "src-tauri/target" }

# Installation des d√©pendances
Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
npm ci --production=false

# Build du frontend avec optimisations
Write-Host "üèóÔ∏è Build du frontend avec optimisations..." -ForegroundColor Yellow
$env:NODE_ENV = "production"
npm run build:prod

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erreur lors du build frontend!" -ForegroundColor Red
    exit 1
}

# Build de l'application Tauri
Write-Host "ü¶Ä Build de l'application Tauri..." -ForegroundColor Yellow
$env:TAURI_PRIVATE_KEY = ""
$env:TAURI_KEY_PASSWORD = ""

# Build avec profil release optimis√©
tauri build --config src-tauri/tauri.conf.json --target x86_64-pc-windows-msvc

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erreur lors du build Tauri!" -ForegroundColor Red
    exit 1
}

# Affichage des r√©sultats
Write-Host "‚úÖ Build termin√© avec succ√®s!" -ForegroundColor Green
Write-Host "üìÅ Fichiers g√©n√©r√©s dans:" -ForegroundColor Cyan

$bundlePath = "src-tauri/target/x86_64-pc-windows-msvc/release/bundle"
if (Test-Path $bundlePath) {
    Get-ChildItem $bundlePath -Recurse -File | Where-Object { $_.Extension -in @('.exe', '.msi') } | ForEach-Object {
        $size = [math]::Round($_.Length / 1MB, 2)
        Write-Host "  üìÑ $($_.Name) - ${size} MB" -ForegroundColor White
        Write-Host "     $($_.FullName)" -ForegroundColor Gray
    }
}

Write-Host "üéâ MacGyver est pr√™t pour la distribution!" -ForegroundColor Green