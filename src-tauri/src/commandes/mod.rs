/**
 * Module principal des commandes Tauri
 * 
 * Ce module centralise toutes les commandes Rust expos√©es au frontend.
 * Il organise les commandes par domaine fonctionnel et facilite leur
 * enregistrement dans l'application principale.
 * 
 * Organisation :
 * - Chaque domaine fonctionnel a son propre sous-module
 * - Les commandes sont r√©export√©es pour simplifier l'import
 * - Documentation compl√®te de chaque commande
 * 
 * Domaines fonctionnels :
 * - salutation : Commandes de d√©monstration et test
 * - (futurs modules √† ajouter selon les besoins)
 */

// === D√©claration des sous-modules ===
// Chaque sous-module contient les commandes d'un domaine sp√©cifique



/// Module contenant les commandes de productivit√©
/// 
/// Ce module fournit toutes les fonctionnalit√©s pour l'application de productivit√© :
/// - Gestion du timer Pomodoro
/// - Sauvegarde et chargement des notes rapides
/// - Gestion de la todolist avec persistance
pub mod productivite;

/// Module contenant les commandes de conversion d'images
/// 
/// Ce module fournit les fonctionnalit√©s de traitement d'images :
/// - Conversion entre formats (JPG, PNG, WebP, BMP, TIFF, GIF)
/// - Redimensionnement et optimisation
/// - Analyse des m√©tadonn√©es d'images
pub mod images;

/// Module contenant les commandes de manipulation de PDF
/// 
/// Ce module fournit les fonctionnalit√©s de traitement de PDF :
/// - Fusion de plusieurs PDFs en un seul
/// - Division d'un PDF en pages individuelles
/// - Extraction d'informations et m√©tadonn√©es
/// - Rotation et manipulation de pages
pub mod pdf;

// === Futurs modules √† ajouter ===
// D√©commentez et ajoutez selon les besoins de votre application

// /// Module pour la gestion des fichiers et dossiers
// pub mod fichiers;

// /// Module pour les informations syst√®me
// pub mod systeme;

// /// Module pour la gestion de la configuration
// pub mod configuration;

// /// Module pour les op√©rations de base de donn√©es
// pub mod base_donnees;

// /// Module pour les op√©rations r√©seau
// pub mod reseau;

// === R√©exports pour simplifier l'utilisation ===
// Ces r√©exports permettent d'importer les commandes directement depuis ce module

// R√©export des commandes de salutation
// R√©exports supprim√©s pour √©viter les warnings

// === Documentation des conventions ===
/**
 * Conventions pour les commandes Tauri
 * 
 * Toutes les commandes doivent respecter ces conventions pour maintenir
 * la coh√©rence et la qualit√© du code :
 * 
 * ## Signature des fonctions
 * ```rust
 * #[tauri::command]
 * pub async fn nom_commande(
 *     parametre1: Type1,
 *     parametre2: Type2,
 * ) -> Result<TypeRetour, String> {
 *     // Impl√©mentation
 * }
 * ```
 * 
 * ## Nommage
 * - Noms en fran√ßais explicites (ex: `saluer_utilisateur` au lieu de `greet`)
 * - Utilisation du snake_case pour les noms de fonctions
 * - Pr√©fixes par domaine si n√©cessaire (ex: `fichier_lire`, `systeme_info`)
 * 
 * ## Gestion d'erreurs
 * - Toujours retourner un `Result<T, String>` ou `Result<T, ErreurPersonnalisee>`
 * - Messages d'erreur en fran√ßais et compr√©hensibles par l'utilisateur
 * - Logging des erreurs avec le niveau appropri√©
 * 
 * ## Documentation
 * - Commentaires Rustdoc complets pour chaque fonction publique
 * - Exemples d'utilisation dans la documentation
 * - Description des param√®tres et valeurs de retour
 * 
 * ## Tests
 * - Tests unitaires pour chaque commande
 * - Tests d'int√©gration pour les flux complexes
 * - Mocks pour les d√©pendances externes
 * 
 * ## S√©curit√©
 * - Validation de tous les param√®tres d'entr√©e
 * - Sanitisation des donn√©es utilisateur
 * - V√©rification des permissions si n√©cessaire
 */

// === Utilitaires communs aux commandes ===

// Type ResultatCommande supprim√© car non utilis√©

/**
 * Macro pour simplifier la cr√©ation de commandes avec logging
 * 
 * Cette macro ajoute automatiquement du logging d'entr√©e et de sortie
 * pour toutes les commandes, facilitant le debugging.
 * 
 * # Exemple
 * ```rust
 * commande_avec_log!(ma_commande, param1: String, param2: i32 => String {
 *     // Impl√©mentation de la commande
 *     Ok(format!("R√©sultat: {} - {}", param1, param2))
 * });
 * ```
 */
#[macro_export]
macro_rules! commande_avec_log {
    ($nom:ident, $($param:ident: $type:ty),* => $retour:ty $corps:block) => {
        #[tauri::command]
        pub async fn $nom($($param: $type),*) -> ResultatCommande<$retour> {
            use log::{info, error};
            
            info!("üîÑ Ex√©cution de la commande '{}' avec param√®tres: {:?}", 
                  stringify!($nom), ($($param,)*));
            
            let resultat = async move $corps.await;
            
            match &resultat {
                Ok(_) => info!("‚úÖ Commande '{}' ex√©cut√©e avec succ√®s", stringify!($nom)),
                Err(e) => error!("‚ùå Erreur dans la commande '{}': {}", stringify!($nom), e),
            }
            
            resultat
        }
    };
}

// === Tests du module ===
#[cfg(test)]
mod tests {
    use super::*;
    
    /**
     * Test de base pour v√©rifier que le module peut √™tre import√©
     */
    #[test]
    fn test_module_commandes() {
        // V√©rifie que le module est correctement structur√©
        assert!(true, "Le module commandes est correctement configur√©");
    }
}