/**
 * Module des commandes de productivit√©
 * 
 * Ce module contient toutes les commandes Tauri pour g√©rer :
 * - Les notifications Pomodoro
 * - La sauvegarde/chargement des notes
 * - La sauvegarde/chargement des t√¢ches
 * 
 * Toutes les donn√©es sont sauvegard√©es localement dans des fichiers JSON
 * dans le r√©pertoire de donn√©es de l'application.
 */

use serde::{Deserialize, Serialize};
use std::fs;
use std::path::PathBuf;
use log::{info, warn, error};

// === STRUCTURES DE DONN√âES ===

/**
 * Structure repr√©sentant une note rapide
 */
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Note {
    pub id: u64,
    pub contenu: String,
    pub date_creation: String,
}

/**
 * Structure repr√©sentant une t√¢che de la todolist
 */
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Tache {
    pub id: u64,
    pub texte: String,
    pub terminee: bool,
    pub date_creation: String,
}

// === COMMANDES POMODORO ===

/**
 * Commande pour notifier la fin d'un cycle Pomodoro
 * 
 * Cette commande peut √™tre √©tendue pour :
 * - Afficher une notification syst√®me
 * - Jouer un son
 * - Enregistrer les statistiques
 * 
 * # Arguments
 * * `cycle` - Num√©ro du cycle Pomodoro termin√©
 * 
 * # Retour
 * * `Result<String, String>` - Message de confirmation ou erreur
 */
#[tauri::command]
pub async fn notifier_pomodoro_termine(cycle: u32) -> Result<String, String> {
    info!("üçÖ Cycle Pomodoro #{} termin√©", cycle);
    
    // Ici on pourrait ajouter :
    // - Notification syst√®me native
    // - Son de notification
    // - Sauvegarde des statistiques
    
    let message = if cycle % 4 == 0 {
        format!("Excellent ! Cycle #{} termin√©. Prenez une pause longue (15 min) !", cycle)
    } else {
        format!("Bravo ! Cycle #{} termin√©. Prenez une pause courte (5 min) !", cycle)
    };
    
    Ok(message)
}

// === COMMANDES NOTES ===

/**
 * Sauvegarde la liste des notes dans un fichier JSON
 * 
 * # Arguments
 * * `notes` - Liste des notes √† sauvegarder
 * 
 * # Retour
 * * `Result<String, String>` - Message de confirmation ou erreur
 */
#[tauri::command]
pub async fn sauvegarder_notes(notes: Vec<Note>) -> Result<String, String> {
    info!("üíæ Sauvegarde de {} notes", notes.len());
    
    match obtenir_chemin_fichier_notes() {
        Ok(chemin) => {
            // Cr√©e le r√©pertoire parent si n√©cessaire
            if let Some(parent) = chemin.parent() {
                if let Err(e) = fs::create_dir_all(parent) {
                    let message_erreur = format!("Impossible de cr√©er le r√©pertoire : {}", e);
                    error!("‚ùå {}", message_erreur);
                    return Err(message_erreur);
                }
            }
            
            // S√©rialise et sauvegarde les notes
            match serde_json::to_string_pretty(&notes) {
                Ok(json) => {
                    match fs::write(&chemin, json) {
                        Ok(_) => {
                            info!("‚úÖ Notes sauvegard√©es dans : {:?}", chemin);
                            Ok(format!("{} notes sauvegard√©es avec succ√®s", notes.len()))
                        }
                        Err(e) => {
                            let message_erreur = format!("Erreur d'√©criture du fichier : {}", e);
                            error!("‚ùå {}", message_erreur);
                            Err(message_erreur)
                        }
                    }
                }
                Err(e) => {
                    let message_erreur = format!("Erreur de s√©rialisation JSON : {}", e);
                    error!("‚ùå {}", message_erreur);
                    Err(message_erreur)
                }
            }
        }
        Err(e) => {
            error!("‚ùå Impossible d'obtenir le chemin du fichier notes : {}", e);
            Err(e)
        }
    }
}

/**
 * Charge la liste des notes depuis le fichier JSON
 * 
 * # Retour
 * * `Result<Vec<Note>, String>` - Liste des notes ou erreur
 */
#[tauri::command]
pub async fn charger_notes() -> Result<Vec<Note>, String> {
    info!("üìñ Chargement des notes");
    
    match obtenir_chemin_fichier_notes() {
        Ok(chemin) => {
            if !chemin.exists() {
                info!("üìù Aucun fichier de notes existant, retour d'une liste vide");
                return Ok(Vec::new());
            }
            
            match fs::read_to_string(&chemin) {
                Ok(contenu) => {
                    match serde_json::from_str::<Vec<Note>>(&contenu) {
                        Ok(notes) => {
                            info!("‚úÖ {} notes charg√©es depuis : {:?}", notes.len(), chemin);
                            Ok(notes)
                        }
                        Err(e) => {
                            let message_erreur = format!("Erreur de d√©s√©rialisation JSON : {}", e);
                            warn!("‚ö†Ô∏è  {}", message_erreur);
                            // Retourne une liste vide plut√¥t qu'une erreur pour ne pas bloquer l'app
                            Ok(Vec::new())
                        }
                    }
                }
                Err(e) => {
                    let message_erreur = format!("Erreur de lecture du fichier : {}", e);
                    warn!("‚ö†Ô∏è  {}", message_erreur);
                    Ok(Vec::new())
                }
            }
        }
        Err(e) => {
            warn!("‚ö†Ô∏è  Impossible d'obtenir le chemin du fichier notes : {}", e);
            Ok(Vec::new())
        }
    }
}

// === COMMANDES T√ÇCHES ===

/**
 * Sauvegarde la liste des t√¢ches dans un fichier JSON
 * 
 * # Arguments
 * * `taches` - Liste des t√¢ches √† sauvegarder
 * 
 * # Retour
 * * `Result<String, String>` - Message de confirmation ou erreur
 */
#[tauri::command]
pub async fn sauvegarder_taches(taches: Vec<Tache>) -> Result<String, String> {
    info!("üíæ Sauvegarde de {} t√¢ches", taches.len());
    
    match obtenir_chemin_fichier_taches() {
        Ok(chemin) => {
            // Cr√©e le r√©pertoire parent si n√©cessaire
            if let Some(parent) = chemin.parent() {
                if let Err(e) = fs::create_dir_all(parent) {
                    let message_erreur = format!("Impossible de cr√©er le r√©pertoire : {}", e);
                    error!("‚ùå {}", message_erreur);
                    return Err(message_erreur);
                }
            }
            
            // S√©rialise et sauvegarde les t√¢ches
            match serde_json::to_string_pretty(&taches) {
                Ok(json) => {
                    match fs::write(&chemin, json) {
                        Ok(_) => {
                            info!("‚úÖ T√¢ches sauvegard√©es dans : {:?}", chemin);
                            Ok(format!("{} t√¢ches sauvegard√©es avec succ√®s", taches.len()))
                        }
                        Err(e) => {
                            let message_erreur = format!("Erreur d'√©criture du fichier : {}", e);
                            error!("‚ùå {}", message_erreur);
                            Err(message_erreur)
                        }
                    }
                }
                Err(e) => {
                    let message_erreur = format!("Erreur de s√©rialisation JSON : {}", e);
                    error!("‚ùå {}", message_erreur);
                    Err(message_erreur)
                }
            }
        }
        Err(e) => {
            error!("‚ùå Impossible d'obtenir le chemin du fichier t√¢ches : {}", e);
            Err(e)
        }
    }
}

/**
 * Charge la liste des t√¢ches depuis le fichier JSON
 * 
 * # Retour
 * * `Result<Vec<Tache>, String>` - Liste des t√¢ches ou erreur
 */
#[tauri::command]
pub async fn charger_taches() -> Result<Vec<Tache>, String> {
    info!("üìñ Chargement des t√¢ches");
    
    match obtenir_chemin_fichier_taches() {
        Ok(chemin) => {
            if !chemin.exists() {
                info!("üìã Aucun fichier de t√¢ches existant, retour d'une liste vide");
                return Ok(Vec::new());
            }
            
            match fs::read_to_string(&chemin) {
                Ok(contenu) => {
                    match serde_json::from_str::<Vec<Tache>>(&contenu) {
                        Ok(taches) => {
                            info!("‚úÖ {} t√¢ches charg√©es depuis : {:?}", taches.len(), chemin);
                            Ok(taches)
                        }
                        Err(e) => {
                            let message_erreur = format!("Erreur de d√©s√©rialisation JSON : {}", e);
                            warn!("‚ö†Ô∏è  {}", message_erreur);
                            // Retourne une liste vide plut√¥t qu'une erreur
                            Ok(Vec::new())
                        }
                    }
                }
                Err(e) => {
                    let message_erreur = format!("Erreur de lecture du fichier : {}", e);
                    warn!("‚ö†Ô∏è  {}", message_erreur);
                    Ok(Vec::new())
                }
            }
        }
        Err(e) => {
            warn!("‚ö†Ô∏è  Impossible d'obtenir le chemin du fichier t√¢ches : {}", e);
            Ok(Vec::new())
        }
    }
}

// === FONCTIONS UTILITAIRES ===

/**
 * Obtient le chemin du fichier de sauvegarde des notes
 * 
 * # Retour
 * * `Result<PathBuf, String>` - Chemin du fichier ou erreur
 */
fn obtenir_chemin_fichier_notes() -> Result<PathBuf, String> {
    obtenir_repertoire_donnees()
        .map(|mut chemin| {
            chemin.push("notes.json");
            chemin
        })
}

/**
 * Obtient le chemin du fichier de sauvegarde des t√¢ches
 * 
 * # Retour
 * * `Result<PathBuf, String>` - Chemin du fichier ou erreur
 */
fn obtenir_chemin_fichier_taches() -> Result<PathBuf, String> {
    obtenir_repertoire_donnees()
        .map(|mut chemin| {
            chemin.push("taches.json");
            chemin
        })
}

/**
 * Obtient le r√©pertoire de donn√©es de l'application
 * 
 * Utilise le r√©pertoire de donn√©es utilisateur standard selon l'OS :
 * - Windows : %APPDATA%/mon-application/
 * - macOS : ~/Library/Application Support/mon-application/
 * - Linux : ~/.local/share/mon-application/
 * 
 * # Retour
 * * `Result<PathBuf, String>` - Chemin du r√©pertoire ou erreur
 */
fn obtenir_repertoire_donnees() -> Result<PathBuf, String> {
    match dirs_next::data_dir() {
        Some(mut chemin) => {
            chemin.push("mon-application");
            Ok(chemin)
        }
        None => {
            Err("Impossible de d√©terminer le r√©pertoire de donn√©es utilisateur".to_string())
        }
    }
}

// === TESTS UNITAIRES ===
#[cfg(test)]
mod tests {
    use super::*;
    
    /**
     * Test de cr√©ation d'une note
     */
    #[test]
    fn test_creation_note() {
        let note = Note {
            id: 1,
            contenu: "Test note".to_string(),
            date_creation: "2024-01-01 12:00:00".to_string(),
        };
        
        assert_eq!(note.id, 1);
        assert_eq!(note.contenu, "Test note");
    }
    
    /**
     * Test de cr√©ation d'une t√¢che
     */
    #[test]
    fn test_creation_tache() {
        let tache = Tache {
            id: 1,
            texte: "Test t√¢che".to_string(),
            terminee: false,
            date_creation: "2024-01-01 12:00:00".to_string(),
        };
        
        assert_eq!(tache.id, 1);
        assert_eq!(tache.texte, "Test t√¢che");
        assert!(!tache.terminee);
    }
    
    /**
     * Test d'obtention du r√©pertoire de donn√©es
     */
    #[test]
    fn test_repertoire_donnees() {
        let resultat = obtenir_repertoire_donnees();
        assert!(resultat.is_ok(), "Le r√©pertoire de donn√©es devrait √™tre accessible");
        
        let chemin = resultat.unwrap();
        assert!(chemin.to_string_lossy().contains("mon-application"));
    }
}